<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Friday, April 22, 2016, 8:09 AM -->
<!-- MuClient version 4.94 -->

<!-- Plugin "Galabans_SleepMonitor" generated by Plugin Wizard -->

<muclient>
<plugin
   name="Galabans_SleepMonitor"
   author="Galaban"
   id="c71affa5c56796063bc71da2"
   language="Lua"
   purpose="When Sleeping, this will watch your health and let you know when you're healty"
   date_written="2016-04-22 08:05:52"
   requires="4.68"
   version="1.0"
   >
<description trim="y">
<![CDATA[
This plugin is primarily a base plugin.  It's used to broadcast when the healing is complete.  This broadcast can be picked up by other plugins and executed on.  (A beep sent, a command executed, etc.)

Alternatively, thsi plugin can be modified to manually do those things above.  Just look for the healingComplete() function and modify that.

This requires only that your prompt have a > symbol in the prompt and ends with a new line (%B) character.  Any number in there will be monitored.
]]>
</description>

</plugin>


<!--  Triggers  -->

<triggers>
  <trigger
   group="SleepMonitor"
   match="You stand up."
   send_to="12"
   sequence="100"
  >
  <send>stopSleeping()</send>
  </trigger>
  <trigger
   group="SleepMonitor"
   match="You wake up."
   send_to="12"
   sequence="100"
  >
  <send>stopSleeping()</send>
  </trigger>
  <trigger
   enabled="y"
   match="You lie down and fall asleep."
   script="beginSleeping"
   send_to="12"
   sequence="100"
  >
  </trigger>
  <trigger
   group="SleepMonitor"
   match="^(.*?)\&gt;"
   regexp="y"
   script="promptCheck"
   send_to="12"
   sequence="100"
  >
  </trigger>
</triggers>

<!--  Timers  -->

<timers>
  <timer name="SleepTimer" second="3.00" offset_second="0.00" send_to="12" >
  <send>Send("")</send>
  </timer>
</timers>

<!--  Script  -->


<script>
<![CDATA[

-------------------------------
--  Sleep Monitor
-------------------------------
monitorValues = {}
lastChangeTime = -1
quickstart = true

function beginSleeping()
    EnableTriggerGroup("SleepMonitor",true)
    EnableTimer("SleepTimer", true)

    -- Use the Last Change Time as a flag to indicate we are initializing
    lastChangeTime = -1
    monitorValues = {}

end

function loadArrayFromPrompt(inprompt)

    local ndx = 0

    for strVal in string.gmatch(inprompt, "%d+") do
        ndx = ndx + 1
        local intVal = tonumber(strVal)
        if (intVal ~= nil) then
            monitorValues[ndx] = intVal
        else
            Note(" ?! something bad happened... ")
        end
    end

end

function initPromptWatch(inprompt)

    -- Load the initial values
    loadArrayFromPrompt(inprompt)

    lastChangeTime = os.time()

    SetTimerOption("SleepTimer","second","3")
    quickstart = true
end

function promptCheck(rName, rLine, rWildcards, rStyles)

    local REPOPTIME = 20

    -- First time?  Initialize what we are watching for
    if (lastChangeTime == -1) then
        initPromptWatch(rLine)
        return
    end

    --  Presumptions:
    --  (I)     The only values that change during sleep are HP/Move/Etc. and they will only increase
    --  (II)    HP/Move/Etc values will all increase at the same time up to their max.
    --  (III)   The heal rate does not vary (there's always N seconds between each healing)
    --  (IV)    There is a New Line character at the end of the prompt...  (Very important)

    if (quickstart == false and (os.time()-lastChangeTime) < REPOPTIME) then
        return
    end
    -- no healing needed, apparently.
    if (quickstart == true and (os.time()-lastChangeTime) > (REPOPTIME * 2)) then
        healingComplete()
        return
    end

    -- OK, here's how this beast works:
    -- We look at a number and compare it to the previous value.
    -- If it changed, then we know that it's a VARIABLE value.
    -- We keep monitoring until all the values no longer change.
    -- Once all the values have not changed, we know that the healing is complete.

    local i = 1
    local haveChange = false

    local prevValues = {}
    for i = 1, #monitorValues do
        prevValues[i] = monitorValues[i]
    end

    loadArrayFromPrompt(rLine)

    for i = 1, #monitorValues do
        if(prevValues[i] ~= monitorValues[i]) then
            lastChangeTime = os.time()
            haveChange = true
        end
    end

    
    if (haveChange == false) then
        if (quickstart == false) then
            healingComplete()
        end
    elseif (quickstart) then
        quickstart = false
        SetTimerOption("SleepTimer","second", tostring(REPOPTIME))
    elseif ((#monitorValues) % 2 == 0) then
        -- If we have an odd number of items, then there must be encumbrance and such.  Ignore it.

        -- We have change, but it's not a quickstart change.
        -- Loop through and see if this is a prompt where we can matchup the <currval> with <maxval>
        -- example:  hp/HP mv/MV... check 1 vs 2, 3 vs 4... If the odds/evens match, presume healed!
        -- Note that if they add encumbrances, they will never match, so this will fail every time.
        local mincheck = 1
        local haveDiff = false
        while (monitorValues[mincheck] ~= nil) do
            if(monitorValues[mincheck] ~= monitorValues[mincheck+1]) then
                haveDiff = true
            end
            mincheck = mincheck + 2
        end
        if (haveDiff == false) then
            healingComplete()
        end
    end
end

function healingComplete()
    Note("Healing complete.  No longer monitoring.")
    stopSleeping()

    BroadcastPlugin(1, "healcomplete")
end

function stopSleeping()
    EnableTriggerGroup("SleepMonitor",false)
    EnableTimer("SleepTimer", false)
end


Note("Custom script loaded.")



]]>
</script>


<!--  Plugin help  -->

<aliases>
  <alias
   script="OnHelp"
   match="Galabans_SleepMonitor:help"
   enabled="y"
  >
  </alias>
</aliases>

<script>
<![CDATA[
function OnHelp ()
  world.Note (world.GetPluginInfo (world.GetPluginID (), 3))
end
]]>
</script> 

</muclient>
